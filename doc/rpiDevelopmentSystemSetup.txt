**** work in progress ****

Set up a development system using a Raspberry Pi 4 or Zero 2 W
(updated 5 Nov. 2023)

You should be comfortable working in a terminal window.

What you will need:

    - Raspberry Pi 4 Model B with 2 GB or 4 GB of RAM (4 GB recommended)
      or Raspberry Pi Zero 2 W (GUI apps very slow due to small, 512 MB memory,
      but pretty good for headless use via ssh)
    - RPi 4:
        - 3-amp (minimum) power supply with USB-C connector
        - USB-C to USB-C cable if the power supply does not have an attached
          cable Note:  Due to a hardware design problem, the RPi 4 has a
          hardware bug that makes it incompatible with electronically marked
          cables.  Older USB-C cables that are for power only or USB 2.0 speeds
          should work ok.  See this article for details and a list of compatible
          cables:
          https://www.tomshardware.com/news/raspberry-pi-4-usb-c-cables-that-work,39869.html
        - micro-HDMI-to-HDMI cable
    - Zero 2 W:
        - .5-amp power supply with micro-USB connector
        - mini-HDMI-to-HDMI cable
        - micro-USB TO USB-A OTG adapter
        - minimum 3-port USB hub
    - HDMI monitor
    - USB keyboard
    - USB mouse or other pointing device
    - Wi-Fi or wired (RPi 4 only) Ethernet network with Internet connection
    - Ethernet cable if you will be using a wired network
    - 8 GB or larger micro-SD card, preferrably a high endurance model


1.  Download and install the Raspberry Pi Imager tool.  It can be found here:

    https://www.raspberrypi.com/software/


2.  Use the Imager tool to download the Raspberry Pi OS and write it to an SD
    card.  Instructions can be found here:

    https://www.raspberrypi.com/documentation/computers/getting-started.html

    Use the OS customization feature in Imager to:

        - set the host name
        - set the user name and password
        - configure WiFi
        - set the locale
        - enable ssh

    This setup procedure has been tested with the 64-bit desktop installation of
    "Raspberry Pi OS (Legacy)," which, as of November 2023, is the Bullseye
    version.  The new* version is Bookworm.  It might work if you can get past
    the frustrations.

    * new apparently means not entirely working


3.  Connect the keyboard, mouse, monitor, network cable (if using a wired
    network), and power supply to the RPi.  Plug in the power supply.  After a
    few moments and a few reboots, a software update should occur automatically,
    then the system is ready to use.


4.  If a software update did not occur automatically, do the update manually
    after the system has been up long enough for the date and time to be set.
    (The current time should appear in the upper right corner of the screen.)

    sudo apt-get update
    sudo apt-get upgrade
    sudo reboot


5.  Click on the raspberry in the upper left corner, hover over Preferences,
    then click on Raspberry Pi Configuration.

    Note:  If you used the OS customization feature in Imager (step 2), you
    can skip a, b, and d.

    a.  Change the password.  It is the password for user pi.

    b.  Consider changing the host name to something else.

    c.  Turn off auto login so that you can log in with your username rather
        than user pi.

    d.  On the Interfaces tab, enable ssh and VNC.  Being able to connect
        to the system via ssh or VNC can come in very handy.  (Use
        hostname.local to connect to it.)

    e.  Enable SPI (required by the RF24 module).


6.  Set the VNC password.  (Allows connection from macOS's built-in VNC viewer.)

    a.  Click on the VNC icon in the upper right-hand corner of the desktop.
        The VNC Server window should open.

    b.  Click on the menu icon (a box with horizontal lines) in the upper
        right-hand corner of the VNC Server window.

    c.  In the left-hand pane, click on Options.

    d.  Dismiss the "Granted permissions without asking for password" message
        if it appears.

    e.  Select Security in the list.

    f.  Change Encryption to "prefer off" and Authentication to "VNC password."

    g.  In the left-hand pane, click on Users and Permissions.

    h.  Make sure "Control desktop using mouse" is enabled.

    i.  Click Apply.

    j.  Set a password as prompted.

    k.  Click OK.

    l.  Close the VNC Server window.


7.  Install the required and nice-to-have useful software.  Use the Add / Remove
    Software option on the raspberry -> Preferences menu.  You can use the
    search feature to locate each package listed below.  (On the Zero 2 W, the
    package list and search updates are extremely slow.  Make sure nothing else
    is open.  Otherwise, the system will thrash itself to death.)

    Vi IMproved - enhanced vi editor - with GTK3 gui (search for "gvim")
    git (Should already be installed.)
    git-flow
    psmisc (Provides the killall utility.  May already be installed.)
    lsof (May already be installed.)
    dnsutils
    mesa-common-dev (for openpixelcontrol)
    freeglut3-dev (for openpixelcontrol)
    cmake and cmake-doc (for building RF24)


8.  If you pre-configured your user account in step 2, skip this step.
    Otherwise, create your user account now, and add it to the sudo group.  Open
    a terminal window by clicking on the terminal-prompt-looking icon in the
    launcher bar at the top left of the screen.  Then, enter these commands at
    the command prompt:

    sudo adduser <username>
    sudo usermod -aG sudo,adm,dialout,spi,gpio <username>


9.  If you pre-configured your user account in step 2, skip this step.  Otherwise,
    log out (raspberry -> Shutdown -> Logout), then log back in with your
    username.  Open another terminal window for entering commands in subsequent
    steps.


10. Using your text editor of preference, add these lines to the end of ~/.bashrc:

    # Set up Illumicone paths.
    export ILLUMICONE_BIN="$HOME/bin"
    export ILLUMICONE_DEVL="$HOME/devl/Illumicone"
    export ILLUMICONE_LOGS="$ILLUMICONE_DEVL/logs"
    export ILLUMICONE_CONFIG="$ILLUMICONE_DEVL/config"
    export ILLUMICONE_SBIN="$ILLUMICONE_DEVL/sbin"
    PATH="$ILLUMICONE_BIN:$ILLUMICONE_SBIN:$PATH"


11. Set up the Illumicone development environment.

    git config --global user.email <your e-mail address>
    git config --global user.name <your username>
    cd
    mkdir devl
    mkdir bin
    cd devl
    git clone https://github.com/skipzone/Illumicone
    cd Illumicone
    mkdir logs
    git flow init  (use the default responses)
    cd
    cp devl/Illumicone/config/vimrc .vimrc
    cp devl/Illumicone/sbin/bash_aliases .bash_aliases
    cp devl/Illumicone/sbin/illumicone_aliases .illumicone_aliases


12. Install RF24 using tmrh20's fork of RF24 on GitHub.  This is the same one we
    use for the widget Arduinos.  You will need RF24 to build the Illumicone
    programs even if you don't plan on connecting an nRF24L01+ module to receive
    widget data.

    cd ~/devl
    git clone https://github.com/nRF24/RF24.git
    cd RF24
    mkdir build
    cd build
    cmake .. -D RF24_DRIVER=SPIDEV
    make
    sudo make install


13. Build the Illumicone programs.

    cd ~/devl/Illumicone/src
    make

=-=-=-=-= resume here.  resolve build errors.


14. Set up the Illumicone simulation configuration.

    cd ~/devl/Illumicone/config
    ln -s $ILLUMICONE_CONFIG/network_localSimulator.json network_active.json
    ln -s $ILLUMICONE_CONFIG/simulator.json activeConfig.json


15. Install openpixelcontrol, which provides the on-screen simulator display of
    Illumicone's pixels.

    cd ~/devl
    git clone https://github.com/zestyping/openpixelcontrol.git
    cd openpixelcontrol
    make bin/gl_server
    cp bin/gl_server ~/bin


16. Test the Illumicone simulation tools and environment.

    cd ~/devl
    startSimulatorGlServer

    A window titled "OPC" should open.  Resize the window, making it much
    larger.  Then, reduce the size of the Illumicone image inside the window
    by holding down shift then left-click and drag downward somewhere inside
    the window.  Do the drag very slowly because the redraw is super slow.  If
    you make it too small, drag upward to make it bigger.  The trick is to
    drag in small movements then allow the redraw to catch up and stop before
    dragging further.  Once the Illumicone image the correct size to fit in
    the window, you can rotate it by dragging without holding the shift key.
    (One could argue that the graphics performance of gl_server is so poor as
    to be barely usable.  But, hey, it's runing on a $55 (or $15!) computer,
    which is pretty cool!)

    gl_server puts itself in the background.  Press <enter> in the terminal
    window to see a prompt again.

    cd ~/devl/Illumicone/src
    ./pc

    You should see the magenta safety lights at the top and bottom of
    Illumicone turn on.

    Open a second terminal window, then start the widget data playback
    program.

    cd
    widgetPlayback.py devl/Illumicone/testData/rainstick.log

    You should now see colored raindrops cascading down Illumicone.

    To terminate widgetPlayback.py or patternController, just type control-C
    in the respective terminal window.  Terminate gl_server by clicking on the
    X in the upper right-hand corner of the OPC window.


17. Install the Arduino IDE.  Download from arduino.cc rather than installing
    via Add / Remove Software in order to get a current version.  Use the
    32-bit version because the 64-bit version does not work, even on the RPi 4
    and Zero 2 W.

    cd
    wget -P Downloads https://downloads.arduino.cc/arduino-1.8.16-linuxarm.tar.xz
    tar -xvf Downloads/arduino-1.8.16.linuxarm.tar.xz
    cd arduino-1.8.16
    sudo ./install.sh
    cp -Rv devl/Illumicone/Arduino/libraries/Illumicone/ Arduino/libraries/

    For more information:  https://www.arduino.cc/en/Guide/Linux


18. Install additional boards packages.

    Board          URL
    -------------  -------------------------------------------------------------
    Pololu A-Star  https://files.pololu.com/arduino/package_pololu_index.json

    In the Arduino IDE, do the following for each board listed above:
        a.  Go to Arduino/Preferences.
        b.  Add the boards package URLs to the Additional Boards Manager URLs
            field by either appending each URL to the comma-delimited list in
            the field or by clicking on the icon next to the field and adding
            each URL on a new line in the dialog box.
        c.  Click on Ok.
        d.  Go to Tools/Board and select Boards Manager at the top of the list.
        e.  Enter a search term from the Board column (brand name works well)
            in the search field.
        f.  In the list that is displayed, find and click on the entry
            corresponding to the board indicated in the Board column.
        h.  Click Install.
        i.  Repeat steps e and f for each board in the list.
        j.  Click Close when finished installing all the boards packages.


19. Install the required Arduino libraries.

    MSGEQ7 by NicoHood
    RBD_Button by Alex Taujenis
    RBD_Timer by Alex Taujenis
    RF24 by TMRh20
    VL53L1X by Pololu

        In the Arduino IDE, do the following for each library listed above:
            a.  Go to Tools/Manage Libraries.
            b.  Enter the library name (RF24, VL53L1X, etc.) in the search
                field.
            c.  In the list that is displayed, find and click on the specified
                library.  Be sure the "by" part matches.
            d.  Click Install.

    I2Cdev and MPU6050 by jrowberg
        cd ~/devl
        git clone http://github.com/jrowberg/i2cdevlib
        cp -Rv i2cdevlib/Arduino/I2Cdev ~/Arduino/libraries/
        cp -Rv i2cdevlib/Arduino/MPU6050 ~/Arduino/libraries/

    Illumicone
        ln -s ~/devl/Illumicone/Arduino/libraries/Illumicone/ ~/Arduino/libraries/Illumicone


20.  If using a Pololu USB AVR Programmer v2 (highly recommended over a simple
     USB<->UART board), install the corresponding software.  Instructions can
     be found in section 4 of the User's Guide.  Brief but probably sufficient
     instructions are below.

    a.  Download https://www.pololu.com/file/0J1475/pololu-usb-avr-programmer-v2-1.1.0-linux-rpi.tar.xz
    b.  Extract the contents of the tarball with "tar -xvf <filename>".
    c.  Run the installation script with "sudo <path>/install.sh".
    d.  Connect the programmer to the RPi.
    e.  Run "pavr2cmd --list" to make sure the software can find the programmer.
    f.  Start the configuration utility with "pavr2gui".


21.  Set up GitHub credentials for pushing to the Illumicone repository.

    a.  Install GitHub CLI (gh).

        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh

        Note: If you get the error "gpg: failed to start the dirmngr
        '/usr/bin/dirmngr': No such file or directory", try installing the
        dirmngr package:
            sudo apt install dirmngr.

    b.  Use gh to store the GitHub credentials.  Note that the GitHub user
        name is in the authentication token and does not need to be entered
        separately.

        $ gh auth login
        ? What account do you want to log into? GitHub.com
        ? What is your preferred protocol for Git operations? HTTPS
        ? Authenticate Git with your GitHub credentials? Yes
        ? How would you like to authenticate GitHub CLI? Paste an authentication token
        Tip: you can generate a Personal Access Token here https://github.com/settings/tokens
        The minimum required scopes are 'repo', 'read:org', 'workflow'.
        ? Paste your authentication token: ****************************************
        - gh config set -h github.com git_protocol https
        ✓ Configured git protocol
        ✓ Logged in as [your GitHub user name]
        $


=-=-=-= resume here


22. Set up I2C.

    sudo apt-get install python-smbus i2c-tools

    sudo raspi-config
        5 Interfacing Options
        P5 I2C
        Yes (to enable the ARM I2C interface)
    Reboot.

    Make illumicone a member of the i2c group.
        sudo usermod -aG i2c illumicone
    Log out and back in.

    Check if I2C is working:
        i2cdetect -y 1


