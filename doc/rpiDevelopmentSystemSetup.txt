**** work in progress ****

Set up a development system using a Raspberry Pi 4
(updated 01 Dec. 2019)

You should be comfortable working in a terminal window.

What you will need:

    - Raspberry Pi 4 Model B with 2 GB or 4 GB of RAM (4 GB recommended)
    - 3-amp (minimum) power supply with USB-C connector
    - USB-C to USB-C cable if the power supply does not have an attached cable
      Note:  Due to a hardware design problem, the RPi 4 has a hardware bug that
      makes it incompatible with electronically marked cables.  Older USB-C
      cables that are for power only or USB 2.0 speeds should work ok.  See this
      article for details and a list of compatible cables:
      https://www.tomshardware.com/news/raspberry-pi-4-usb-c-cables-that-work,39869.html
    - micro-HDMI-to-HDMI cable
    - HDMI monitor
    - USB keyboard
    - USB mouse or other pointing device
    - Wi-Fi or wired Ethernet network with Internet connection
    - Ethernet cable if you will be using a wired network
    - 8 GB or larger micro-SD card, preferrably a high endurance model



1.  Download Raspbian Buster with desktop from here:

    https://downloads.raspberrypi.org/raspbian_latest


2.  Write the image to a micro-SD card.  The Raspberry Pi Foundation has a
    good resource that explains how.

    https://www.raspberrypi.org/documentation/installation/installing-images/README.md


3.  Connect the keyboard, mouse, monitor, network cable (if using a wired
    network), and power supply to the RPi.  Plug in the power supply.  After a
    few moments, the "Welcome to Raspberry Pi" dialog should appear on the
    monitor.  Follow the bouncing ball to do the basic setup.  Don't worry if
    the software update doesn't work.  Select the restart option at the end of
    the process.


4.  If the software update during the setup process did not work, do the update
    manually.  Open a terminal window by clicking on the terminal-prompt-looking
    icon in the launcher bar at the top left of the screen.  Then, enter these
    commands at the command prompt:

    sudo apt-get update
    sudo apt-get upgrade
    sudo reboot

    TODO:  The update will work if you let the thing sit long enough to set
    the clock to the current time.


5.  Click on the raspberry in the upper left corner, hover over Preferences,
    then click on Raspberry Pi Configuration.

    a.  Change the password.  It is the password for user pi.

    b.  Consider changing the host name to something else.

    c.  Turn off auto login so that you can log in with your username rather
        than user pi.

    d.  On the Interfaces tab, enable ssh and VNC.  Being able to connect
        to the system via ssh or VNC can come in very handy.  (Use
        hostname.local to connect to it.)

    e.  Enable SPI (required by the RF24 module).


6.  Set the VNC password.  (Allows connection from macOS's built-in VNC viewer.)

    a.  Click on the VNC icon in the upper right-hand corner of the desktop.
        The VNC Server window should open.

    b.  Click on the menu icon (a box with horizontal lines) in the upper
        right-hand corner of the VNC Server window.

    c.  Click on Options.

    d.  Dismiss the "Granted permissions without asking for password" message
        if it appears.

    e.  Select Security in the list.

    f.  Change Authentication to VNC password.

    g.  Click Apply.

    h.  Set a password as prompted.

    i.  Click OK.

    j.  Close the VNC Server window.
    

7.  Install the required and nice-to-have useful software.  Use the Add / Remove
    Software option on the raspberry -> Preferences menu.  You can use the
    search feature to locate each package listed below.

    Vi IMproved - enhanced vi editor - with GTK2 gui
    git (Should already be installed.)
    git-flow
    psmisc (Provides the killall utility.  May already be installed.)
    lsof (May already be installed.)
    dnsutils
    mesa-common-dev (for openpixelcontrol)
    freeglut3-dev (for openpixelcontrol)


8.  Create your user account, and add it to the sudo group.  Open a terminal
    window by clicking on the terminal-prompt-looking icon in the launcher bar
    at the top left of the screen.  Then, enter these commands at the command
    prompt:

    sudo adduser <username>
    sudo usermod -aG sudo,adm,dialout,spi,gpio <username>


9.  Log out (raspberry -> Shutdown -> Logout), then log back in with your
    username.  Open another terminal window for entering commands in subsequent
    steps.


10. Using your text editor of preference, add these lines to the end of
    the ~/.profile and ~/.bashrc files:

    # Set up Illumicone paths.
    export ILLUMICONE_BIN="$HOME/bin"
    export ILLUMICONE_DEVL="$HOME/devl/Illumicone"
    export ILLUMICONE_LOGS="$ILLUMICONE_DEVL/logs"
    export ILLUMICONE_CONFIG="$ILLUMICONE_DEVL/config"
    export ILLUMICONE_SBIN="$ILLUMICONE_DEVL/sbin"
    PATH="$ILLUMICONE_BIN:$ILLUMICONE_SBIN:$PATH"


11. Set up the Illumicone development environment.

    git config --global user.email <your e-mail address>
    git config --global user.name <your username>
    cd
    mkdir devl
    mkdir bin
    cd devl
    git clone https://github.com/skipzone/Illumicone
    cd Illumicone
    mkdir logs
    git flow init  (use the default responses)
    cd
    cp devl/Illumicone/config/vimrc .vimrc
    cp devl/Illumicone/sbin/bash_aliases .bash_aliases
    cp devl/Illumicone/sbin/illumicone_aliases .illumicone_aliases


12. Install RF24 using tmrh20's fork of RF24 on GitHub.  This is the same one we
    use for the widget Arduinos.  You will need RF24 to build the Illumicone
    programs even if you don't plan on connecting an nRF24L01+ module to receive
    widget data.

    cd ~/devl
    git clone https://github.com/nRF24/RF24.git
    cd RF24
    ./configure --driver=SPIDEV  (this allows widgetRcvr to be run without sudo)
    make
    sudo make install


13. Build the Illumicone programs.

    cd ~/devl/Illumicone/src
    make


14. Set up the Illumicone simulation configuration.

    cd ~/devl/Illumicone/config
    ln -s $ILLUMICONE_CONFIG/network_localSimulator.json network_active.json
    ln -s $ILLUMICONE_CONFIG/simulator.json activeConfig.json


15. Install openpixelcontrol, which provides the on-screen simulator display of
    Illumicone's pixels.

    cd ~/devl
    git clone https://github.com/zestyping/openpixelcontrol.git
    cd openpixelcontrol
    make bin/gl_server
    cp bin/gl_server ~/bin


16. Test the Illumicone simulation tools and environment.

    cd ~/devl
    startSimulatorGlServer

    A window titled "OPC" should open.  Resize the window, making it much
    larger.  Then, reduce the size of the Illumicone image inside the window
    by holding down shift then left-click and drag downward somewhere inside
    the window.  Do the drag very slowly because the redraw is super slow.  If
    you make it too small, drag upward to make it bigger.  The trick is to
    drag in small movements then allow the redraw to catch up and stop before
    dragging further.  Once the Illumicone image the correct size to fit in
    the window, you can rotate it by dragging without holding the shift key.
    (One could argue that the graphics performance of gl_server is so poor as
    to be barely usable.  But, hey, it's runing on a $55 computer, which is
    pretty cool!)

    gl_server puts itself in the background.  Press <enter> in the terminal
    window to see a prompt again.

    cd ~/devl/Illumicone/src
    ./pc

    You should see the magenta safety lights at the top and bottom of
    Illumicone turn on.

    Open a second terminal window, then start the widget data playback
    program.

    cd
    widgetPlayback.py devl/Illumicone/testData/rainstick.log

    You should now see colored raindrops cascading down Illumicone.

    To terminate widgetPlayback.py or patternController, just type control-C
    in the respective terminal window.  Terminate gl_server by clicking on the
    X in the upper right-hand corner of the OPC window.


17. Install the Arduino IDE.  (Download from arduino.cc rather than installing
    via Add / Remove Software in order to get a current version.)

    cd
    wget -P Downloads https://downloads.arduino.cc/arduino-1.8.10-linuxarm.tar.xz
    tar -xvf Downloads/arduino-1.8.10-linuxarm.tar.xz
    cd arduino-1.8.10
    sudo ./install.sh
    cp -Rv devl/Illumicone/Arduino/libraries/Illumicone/ Arduino/libraries/

    For more information:  https://www.arduino.cc/en/Guide/Linux


18. Install the required Arduino libraries.

    RBD_Button by Alex Taujenis
    RBD_Timer by Alex Taujenis
    RF24 by TMRh20
    VL53L1X by Pololu

        In the Arduino IDE:
            a.  Go to Tools/Manage Libraries.
            b.  Enter the library name (RF24, VL53L1X, etc.) in the search field.
            c.  In the list that is displayed, find the specified library.  Be
                sure the "by" part matches.
            d.  Click on Install.

    I2Cdev and MPU6050 by jrowberg
        cd ~/devl
        git clone http://github.com/jrowberg/i2cdevlib
        cp -Rv i2cdevlib/Arduino/I2Cdev ~/Arduino/libraries/
        cp -Rv i2cdevlib/Arduino/MPU6050 ~/Arduino/libraries/

    Illumicone
        cp -Rv ~/devl/Illumicone/Arduino/libraries/Illumicone ~/Arduino/libraries/


=-=-=-= resume here


19. Set up I2C.

    sudo apt-get install python-smbus i2c-tools

    sudo raspi-config
        5 Interfacing Options
        P5 I2C
        Yes (to enable the ARM I2C interface)
    Reboot.

    Make illumicone a member of the i2c group.
        sudo usermod -aG i2c illumicone
    Log out and back in.

    Check if I2C is working:
        i2cdetect -y 1


20.  Set up GitHub credentials for pushing to the Illumicone repository.

    a.  Install GitHub CLI.

        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh

        Note: If you get the error "gpg: failed to start the dirmngr
        '/usr/bin/dirmngr': No such file or directory", try installing the
        dirmngr package:
            sudo apt install dirmngr.

    b.  Store the GitHub credentials.

        gh auth login
            For preferred protocol, select HTTPS.
            Copy/paste your personal access token.



